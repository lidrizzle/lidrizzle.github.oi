<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>STL_vector</title>
    <url>/lidrizzle.github.oi/2024/05/24/STL-vector/</url>
    <content><![CDATA[<h1>
   <center>《vector》篇</center> 
</h1>

<p>*** vector中的容量变化为：增长策略对不同编译器或库是不同的。***</p>
<h3 id="1-元素去重的三个方法"><a href="#1-元素去重的三个方法" class="headerlink" title="1.  元素去重的三个方法"></a>1.  元素去重的三个方法</h3><p>(1)结合sort和unique函数</p>
<blockquote>
<p>unique()函数将相邻且重复的元素放到<a href="https://so.csdn.net/so/search?q=vector&spm=1001.2101.3001.7020">vector</a>的尾部 然后返回指向第一个重复元素的迭代器再用erase函数擦除从这个元素到最后元素的所有的元素。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br><span class="line">vec.<span class="built_in">erase</span>(<span class="built_in">unique</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>()), vec.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure>

<p>(2)简单的利用set的特性</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="type">int</span> myints[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">sizeof</span>(myints)/<span class="built_in">sizeof</span>(<span class="type">int</span>); <span class="comment">//求静态数组长度</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(myints, myints + len)</span></span>;</span><br><span class="line">set&lt;<span class="type">int</span>&gt;<span class="built_in">s</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br><span class="line">vec.<span class="built_in">assign</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure>

<p>(3)使用remove()函数，删除容器中和指定元素值相同的所有元素</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除容器中所有和指定元素值相等的元素，并返回指向最后一个元素下一个位置的迭代器。值得一提的是，调用该函数不会改变容器的大小和容量。</p>
</blockquote>
<h3 id="2-cmp-排序"><a href="#2-cmp-排序" class="headerlink" title="2.  cmp()排序"></a>2.  cmp()排序</h3><p>使用sort()给vector&lt;pair&lt;int, int&gt;&gt; 排序，sort默认是按照pair的first升序排序，如果first相同，则按照second进行升序排序，具体代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; a, pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.first == b.first) <span class="keyword">return</span> a.second &gt; b.second;</span><br><span class="line">    <span class="keyword">return</span> a.first &gt; b.first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-unique"><a href="#3-unique" class="headerlink" title="3.  unique()"></a>3.  unique()</h3><p>从头到尾，判断当前元素是否等于上一个元素，**将不重复的元素移到前面来(赋值操作)**，而不是将重复的元素移动到后面去。</p>
<p>因为是判断当前元素是否等于上一个元素，所以要去重的容器必须是经过排序的有序容器。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//unique讲解示例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>&#125;;</span><br><span class="line">	<span class="comment">//排序</span></span><br><span class="line">	<span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">	<span class="comment">//1 2 3 3 4 5 5</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//pos是去重以后vector中没有重复元素的下一个位置的迭代器</span></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;::iterator pos = <span class="built_in">unique</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">	<span class="type">int</span> index = pos - v.<span class="built_in">begin</span>(); <span class="comment">// 没有重复元素的下一个位置的坐标</span></span><br><span class="line">  </span><br><span class="line">	<span class="comment">//去重后整个容器</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		cout &lt;&lt; v[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//1 2 3 4 5 5 5</span></span><br><span class="line">	<span class="comment">//从容器开始到pos：去重后的容器元素</span></span><br><span class="line">	<span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator i = v.<span class="built_in">begin</span>(); i &lt; pos; i++) &#123;</span><br><span class="line">		cout &lt;&lt; *i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//从pos到容器结束：无意义的元素</span></span><br><span class="line">	<span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator i = pos; i &lt; v.<span class="built_in">end</span>(); i++) &#123;</span><br><span class="line">		cout &lt;&lt; *i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//5 5</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-erase"><a href="#4-erase" class="headerlink" title="4.  erase()"></a>4.  erase()</h3><p>可以删除指定位置的元素，或指定范围的元素		</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原型如下：</span></span><br><span class="line">（<span class="number">1</span>）<span class="function">string&amp; <span class="title">erase</span> <span class="params">( <span class="type">size_t</span> pos = <span class="number">0</span>, <span class="type">size_t</span> n = npos )</span></span>;</span><br><span class="line">（<span class="number">2</span>）<span class="function">iterator <span class="title">erase</span> <span class="params">( iterator position )</span></span>;</span><br><span class="line">（<span class="number">3</span>）<span class="function">iterator <span class="title">erase</span> <span class="params">( iterator first, iterator last )</span></span>;</span><br><span class="line"><span class="comment">//也就是说有三种用法</span></span><br><span class="line">（<span class="number">1</span>）<span class="built_in">erase</span>(pos,n); 删除从pos开始的n个字符，比如<span class="built_in">erase</span>(<span class="number">0</span>,<span class="number">1</span>)就是删除第一个字符</span><br><span class="line">（<span class="number">2</span>）<span class="built_in">erase</span>(position);删除position处的一个字符(position是个string类型的迭代器)</span><br><span class="line">（<span class="number">3</span>）<span class="built_in">erase</span>(first,last);删除从first到last之间的字符（first和last都是迭代器）</span><br></pre></td></tr></table></figure>

<p>erase函数的返回值是这么介绍的：<strong>一个迭代器，指定在任何删除的元素之后剩余的第一个元素，如果不存在这样的元素，则指定指向向量结尾的指针</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//vector去重无序数组且要保持原来的顺序</span></span><br><span class="line"><span class="comment">//比如：</span></span><br><span class="line"><span class="comment">//1，3，1，7，5，7</span></span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="comment">//1，3，7，5</span></span><br><span class="line"><span class="comment">//原理：就是简单比较当前元素是否出现在当前元素之前的数组中，如果没有才填入。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_readingOrder</span><span class="params">(vector&lt;<span class="type">int</span>&gt; vec)</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; vecprint;</span><br><span class="line">	<span class="comment">//第一个元素不用比</span></span><br><span class="line">	vecprint.<span class="built_in">push_back</span>(vec[<span class="number">0</span>]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;vec.<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">		<span class="type">bool</span> tag=<span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j =<span class="number">0</span>;j&lt;i;j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(vec[i]==vec[j]) &#123;</span><br><span class="line">				tag=<span class="literal">false</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(tag==<span class="literal">true</span>)	vecprint.<span class="built_in">push_back</span>(vec[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//控制台输出</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;vecprint.<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">		cout&lt;&lt;vecprint[i]&lt;&lt;endl;</span><br><span class="line">	&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-min-max-element"><a href="#5-min-max-element" class="headerlink" title="5.  min&#x2F;max_element()"></a>5.  min&#x2F;max_element()</h3><p>求vector容器中的最小&#x2F;最大元素。</p>
<blockquote>
<p> 接收参数：容器的首尾地址（迭代器）（可以是一个区间）</p>
<p> 返回：最值元素的<strong>地址</strong>（迭代器），需要减去序列头以转换为下标</p>
<p> *<strong>max_element（）与*min_element（）</strong>分别用来求最大元素和最小元素的值。</p>
<p> 返回的是迭代器</p>
<p> cout &lt;&lt; v[  max_element(  v.begin(),  v.end() )  -  v.begin() ];</p>
</blockquote>
<h3 id="6-vector的遍历"><a href="#6-vector的遍历" class="headerlink" title="6.  vector的遍历"></a>6.  vector的遍历</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一种</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line"><span class="keyword">for</span> (it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it ++ ) &#123;</span><br><span class="line">    cout &lt;&lt; v[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第二种使用auto</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it ++ ) &#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种 定义反向迭代器</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;reverse_iterator it;</span><br><span class="line"><span class="keyword">for</span> (it = v.<span class="built_in">rbegin</span>(); it != v.<span class="built_in">rend</span>(); it ++ ) &#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第四种 使用auto同第二种</span></span><br></pre></td></tr></table></figure>

<h3 id="7-vector的创建和初始化"><a href="#7-vector的创建和初始化" class="headerlink" title="7.   vector的创建和初始化"></a>7.   vector的创建和初始化</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v1; </span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v2</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">//初始化10个int类型元素</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">double</span>&gt; <span class="title">v3</span><span class="params">(<span class="number">10</span>, <span class="number">1.23</span>)</span></span>; <span class="comment">//初始化10个元素且初值为1.23</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v4</span><span class="params">(a, a + <span class="number">5</span>)</span></span>;<span class="comment">//用数组v4[0...4]共五个元素初始</span></span><br></pre></td></tr></table></figure>

<h3 id="8-vector成员函数"><a href="#8-vector成员函数" class="headerlink" title="8.  vector成员函数"></a>8.  vector成员函数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">empyt</span>() / <span class="built_in">size</span>() / [] / <span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">reserve</span>(n); <span class="comment">//  为容器预分配n个元素的空间</span></span><br><span class="line"><span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>()); <span class="comment">//翻转[first, end)之间的元素，没有返回值</span></span><br><span class="line"><span class="built_in">push_back</span>();<span class="comment">//在尾部添加一个元素</span></span><br><span class="line"><span class="built_in">insert</span>(pos, elem); <span class="comment">//元素elem插入到迭代器pos指定元素之前,</span></span><br><span class="line">如：<span class="built_in">insert</span>(v.<span class="built_in">begin</span>() + i, k, a); <span class="comment">// 在下标为i的元素前插入k个元素a</span></span><br><span class="line">v.<span class="built_in">size</span>();<span class="comment">//当前真实元素个数</span></span><br><span class="line">v.<span class="built_in">capacity</span>();<span class="comment">// 预分配的空间大小</span></span><br></pre></td></tr></table></figure>

<h3 id="9-vector容器大小增长规律"><a href="#9-vector容器大小增长规律" class="headerlink" title="9.  vector容器大小增长规律"></a>9.  vector容器大小增长规律</h3><blockquote>
<ul>
<li>当元素个数达到当前容量(capacity())vector会进行扩容，容纳更多元素</li>
<li>扩容时，vector容器会分配更大一块内存，并将原有的元素逐个复制到新的空间中。</li>
<li>扩容通常会导致vector容器内部重新分配内存，因此需要进行拷贝操作，影响性能。</li>
</ul>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/lidrizzle.github.oi/2024/05/24/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
